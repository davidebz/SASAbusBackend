/*********************************************************************************
 *                                                                               *
 * WARNING: File automatically generated by DMXmlJson. DON'T CHANGE IT manually! *
 *                                                                               *
 *********************************************************************************/

package it.bz.tis.sasabus.backend.shared;


public class SASAbusBackendUnmarshaller_Helper extends bz.davide.dmxmljson.unmarshalling.Unmarshaller
{
   protected SASAbusBackendUnmarshaller_Helper()
   {
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.NewsList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.NewsList((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.NewsList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // news
            if ((value = structure.property("news")) != null)
               if (value.isNull())
                  ((NewsList)obj).news = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("News"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((NewsList)obj).news = arrayList;
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.BusStationList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.BusStationList((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.BusStationList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // busStations
            if ((value = structure.property("busStations")) != null)
               if (value.isNull())
                  ((BusStationList)obj).busStations = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("BusStationLazy"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((BusStationList)obj).busStations = (it.bz.tis.sasabus.backend.shared.BusStationLazy[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.BusStationLazy[0]);
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.BusLineList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.BusLineList((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.BusLineList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // busLines
            if ((value = structure.property("busLines")) != null)
               if (value.isNull())
                  ((BusLineList)obj).busLines = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("BusLine"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((BusLineList)obj).busLines = (it.bz.tis.sasabus.backend.shared.BusLine[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.BusLine[0]);
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.AreaList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.AreaList((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.AreaList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // areas
            if ((value = structure.property("areas")) != null)
               if (value.isNull())
                  ((AreaList)obj).areas = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("Area"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((AreaList)obj).areas = (it.bz.tis.sasabus.backend.shared.Area[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.Area[0]);
               }
            // lastModified
            if ((value = structure.property("lastModified")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((AreaList)obj).lastModified = value.integer();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.BusTripStopList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.BusTripStopList((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.BusTripStopList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // busTripStops
            if ((value = structure.property("busTripStops")) != null)
               if (value.isNull())
                  ((BusTripStopList)obj).busTripStops = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("BusTripStopReference"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((BusTripStopList)obj).busTripStops = (it.bz.tis.sasabus.backend.shared.BusTripStopReference[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.BusTripStopReference[0]);
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.SASAbusDBLastModified", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.SASAbusDBLastModified((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.SASAbusDBLastModified", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // timestamp
            if ((value = structure.property("timestamp")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((SASAbusDBLastModified)obj).timestamp = value.integer();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.News", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.News((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.News", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // id
            if ((value = structure.property("id")) != null)
               if (value.isNull())
                  ((News)obj).id = null;
               else
               {
                  ((News)obj).id = value.string();
               }
            // lastmod
            if ((value = structure.property("lastmod")) != null)
               if (value.isNull())
                  ((News)obj).lastmod = null;
               else
               {
                  ((News)obj).lastmod = value.string();
               }
            // linienliste
            if ((value = structure.property("linienliste")) != null)
               if (value.isNull())
                  ((News)obj).linienliste = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                        arrayList.add(value.string());
                  }                                                                   
                  ((News)obj).linienliste = arrayList;
               }
            // nachricht_de
            if ((value = structure.property("nachricht_de")) != null)
               if (value.isNull())
                  ((News)obj).nachricht_de = null;
               else
               {
                  ((News)obj).nachricht_de = value.string();
               }
            // nachricht_it
            if ((value = structure.property("nachricht_it")) != null)
               if (value.isNull())
                  ((News)obj).nachricht_it = null;
               else
               {
                  ((News)obj).nachricht_it = value.string();
               }
            // titel_de
            if ((value = structure.property("titel_de")) != null)
               if (value.isNull())
                  ((News)obj).titel_de = null;
               else
               {
                  ((News)obj).titel_de = value.string();
               }
            // titel_it
            if ((value = structure.property("titel_it")) != null)
               if (value.isNull())
                  ((News)obj).titel_it = null;
               else
               {
                  ((News)obj).titel_it = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.BusStationLazy", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.BusStationLazy((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.BusStationLazy", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // name_de
            if ((value = structure.property("name_de")) != null)
               if (value.isNull())
                  ((BusStationLazy)obj).name_de = null;
               else
               {
                  ((BusStationLazy)obj).name_de = value.string();
               }
            // name_it
            if ((value = structure.property("name_it")) != null)
               if (value.isNull())
                  ((BusStationLazy)obj).name_it = null;
               else
               {
                  ((BusStationLazy)obj).name_it = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.BusLine", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.BusLine((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.BusLine", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // area
            if ((value = structure.property("area")) != null)
               if (value.isNull())
                  ((BusLine)obj).area = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((BusLine)obj).area = (it.bz.tis.sasabus.backend.shared.Area)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Area"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((BusLine)obj).area = (it.bz.tis.sasabus.backend.shared.Area)o;
                  }
               }
            // busStops
            if ((value = structure.property("busStops")) != null)
               if (value.isNull())
                  ((BusLine)obj).busStops = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("BusStop"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((BusLine)obj).busStops = (it.bz.tis.sasabus.backend.shared.BusStop[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.BusStop[0]);
               }
            // id
            if ((value = structure.property("id")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusLine)obj).id = (int)value.integer();
               }
            // number
            if ((value = structure.property("number")) != null)
               if (value.isNull())
                  ((BusLine)obj).number = null;
               else
               {
                  ((BusLine)obj).number = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.Area", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.Area((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.Area", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // busLines
            if ((value = structure.property("busLines")) != null)
               if (value.isNull())
                  ((Area)obj).busLines = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("BusLine"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((Area)obj).busLines = (it.bz.tis.sasabus.backend.shared.BusLine[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.BusLine[0]);
               }
            // id
            if ((value = structure.property("id")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((Area)obj).id = (int)value.integer();
               }
            // name_de
            if ((value = structure.property("name_de")) != null)
               if (value.isNull())
                  ((Area)obj).name_de = null;
               else
               {
                  ((Area)obj).name_de = value.string();
               }
            // name_it
            if ((value = structure.property("name_it")) != null)
               if (value.isNull())
                  ((Area)obj).name_it = null;
               else
               {
                  ((Area)obj).name_it = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.BusTripStopReference", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.BusTripStopReference((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.BusTripStopReference", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // busTrip
            if ((value = structure.property("busTrip")) != null)
               if (value.isNull())
                  ((BusTripStopReference)obj).busTrip = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((BusTripStopReference)obj).busTrip = (it.bz.tis.sasabus.backend.shared.BusTrip)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("BusTrip"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((BusTripStopReference)obj).busTrip = (it.bz.tis.sasabus.backend.shared.BusTrip)o;
                  }
               }
            // index
            if ((value = structure.property("index")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusTripStopReference)obj).index = (int)value.integer();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.BusStop", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.BusStop((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.BusStop", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // busStation
            if ((value = structure.property("busStation")) != null)
               if (value.isNull())
                  ((BusStop)obj).busStation = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((BusStop)obj).busStation = (it.bz.tis.sasabus.backend.shared.BusStation)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("BusStation"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((BusStop)obj).busStation = (it.bz.tis.sasabus.backend.shared.BusStation)o;
                  }
               }
            // id
            if ((value = structure.property("id")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusStop)obj).id = (int)value.integer();
               }
            // lat
            if ((value = structure.property("lat")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusStop)obj).lat = value.decimal();
               }
            // lon
            if ((value = structure.property("lon")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusStop)obj).lon = value.decimal();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.BusTrip", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.BusTrip((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.BusTrip", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // areaId
            if ((value = structure.property("areaId")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusTrip)obj).areaId = (int)value.integer();
               }
            // busLineId
            if ((value = structure.property("busLineId")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusTrip)obj).busLineId = (int)value.integer();
               }
            // busTripStop
            if ((value = structure.property("busTripStop")) != null)
               if (value.isNull())
                  ((BusTrip)obj).busTripStop = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("BusTripStop"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((BusTrip)obj).busTripStop = (it.bz.tis.sasabus.backend.shared.BusTripStop[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.BusTripStop[0]);
               }
            // endHHMMSS
            if ((value = structure.property("endHHMMSS")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusTrip)obj).endHHMMSS = (int)value.integer();
               }
            // id
            if ((value = structure.property("id")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusTrip)obj).id = (int)value.integer();
               }
            // runningDays
            if ((value = structure.property("runningDays")) != null)
               if (value.isNull())
                  ((BusTrip)obj).runningDays = null;
               else
               {
                  ((BusTrip)obj).runningDays = value.string();
               }
            // startHHMMSS
            if ((value = structure.property("startHHMMSS")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusTrip)obj).startHHMMSS = (int)value.integer();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.BusStation", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.BusStation((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.BusStation", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // busLines
            if ((value = structure.property("busLines")) != null)
               if (value.isNull())
                  ((BusStation)obj).busLines = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("BusLine"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((BusStation)obj).busLines = (it.bz.tis.sasabus.backend.shared.BusLine[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.BusLine[0]);
               }
            // busStops
            if ((value = structure.property("busStops")) != null)
               if (value.isNull())
                  ((BusStation)obj).busStops = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("BusStop"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((BusStation)obj).busStops = (it.bz.tis.sasabus.backend.shared.BusStop[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.BusStop[0]);
               }
            // id
            if ((value = structure.property("id")) != null)
               if (value.isNull())
                  ((BusStation)obj).id = null;
               else
               {
                  ((BusStation)obj).id = value.string();
               }
            // name_de
            if ((value = structure.property("name_de")) != null)
               if (value.isNull())
                  ((BusStation)obj).name_de = null;
               else
               {
                  ((BusStation)obj).name_de = value.string();
               }
            // name_it
            if ((value = structure.property("name_it")) != null)
               if (value.isNull())
                  ((BusStation)obj).name_it = null;
               else
               {
                  ((BusStation)obj).name_it = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.BusTripStop", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.BusTripStop((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.BusTripStop", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // busStopId
            if ((value = structure.property("busStopId")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusTripStop)obj).busStopId = (int)value.integer();
               }
            // id
            if ((value = structure.property("id")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusTripStop)obj).id = (int)value.integer();
               }
            // timeHHMMSS
            if ((value = structure.property("timeHHMMSS")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((BusTripStop)obj).timeHHMMSS = (int)value.integer();
               }
         }
      });

   }
}
