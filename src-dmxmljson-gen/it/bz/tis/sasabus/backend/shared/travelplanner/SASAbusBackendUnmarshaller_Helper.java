/*********************************************************************************
 *                                                                               *
 * WARNING: File automatically generated by DMXmlJson. DON'T CHANGE IT manually! *
 *                                                                               *
 *********************************************************************************/

package it.bz.tis.sasabus.backend.shared.travelplanner;


public class SASAbusBackendUnmarshaller_Helper extends it.bz.tis.sasabus.backend.shared.SASAbusBackendUnmarshaller_Helper
{
   protected SASAbusBackendUnmarshaller_Helper()
   {
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ReqC", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.ReqC((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ReqC", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ConReq
            if ((value = structure.property("ConReq")) != null)
               if (value.isNull())
                  ((ReqC)obj).ConReq = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("ConReq"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((ReqC)obj).ConReq = (it.bz.tis.sasabus.backend.shared.travelplanner.ConReq[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.ConReq[0]);
               }
            // ConScrReq
            if ((value = structure.property("ConScrReq")) != null)
               if (value.isNull())
                  ((ReqC)obj).ConScrReq = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("ConScrReq"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((ReqC)obj).ConScrReq = (it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq[0]);
               }
            // LocValReq
            if ((value = structure.property("LocValReq")) != null)
               if (value.isNull())
                  ((ReqC)obj).LocValReq = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("LocValReq"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((ReqC)obj).LocValReq = (it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq[0]);
               }
            // accessId
            if ((value = structure.property("accessId")) != null)
               if (value.isNull())
                  ((ReqC)obj).accessId = null;
               else
               {
                  ((ReqC)obj).accessId = value.string();
               }
            // lang
            if ((value = structure.property("lang")) != null)
               if (value.isNull())
                  ((ReqC)obj).lang = null;
               else
               {
                  ((ReqC)obj).lang = value.string();
               }
            // prod
            if ((value = structure.property("prod")) != null)
               if (value.isNull())
                  ((ReqC)obj).prod = null;
               else
               {
                  ((ReqC)obj).prod = value.string();
               }
            // ver
            if ((value = structure.property("ver")) != null)
               if (value.isNull())
                  ((ReqC)obj).ver = null;
               else
               {
                  ((ReqC)obj).ver = value.string();
               }
            // xmlns__xsi
            if ((value = structure.property("xmlns__xsi")) != null)
               if (value.isNull())
                  ((ReqC)obj).xmlns__xsi = null;
               else
               {
                  ((ReqC)obj).xmlns__xsi = value.string();
               }
            // xsi__noNamespaceSchemaLocation
            if ((value = structure.property("xsi__noNamespaceSchemaLocation")) != null)
               if (value.isNull())
                  ((ReqC)obj).xsi__noNamespaceSchemaLocation = null;
               else
               {
                  ((ReqC)obj).xsi__noNamespaceSchemaLocation = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ResC", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.ResC((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ResC", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ConRes
            if ((value = structure.property("ConRes")) != null)
               if (value.isNull())
                  ((ResC)obj).ConRes = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("ConRes"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((ResC)obj).ConRes = (it.bz.tis.sasabus.backend.shared.travelplanner.ConRes[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.ConRes[0]);
               }
            // LocValRes
            if ((value = structure.property("LocValRes")) != null)
               if (value.isNull())
                  ((ResC)obj).LocValRes = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("LocValRes"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((ResC)obj).LocValRes = (it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes[0]);
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConReq", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.ConReq((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConReq", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Dest
            if ((value = structure.property("Dest")) != null)
               if (value.isNull())
                  ((ConReq)obj).Dest = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((ConReq)obj).Dest = (it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("ConReqStartDest"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((ConReq)obj).Dest = (it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)o;
                  }
               }
            // RFlags
            if ((value = structure.property("RFlags")) != null)
               if (value.isNull())
                  ((ConReq)obj).RFlags = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((ConReq)obj).RFlags = (it.bz.tis.sasabus.backend.shared.travelplanner.RFlags)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("RFlags"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((ConReq)obj).RFlags = (it.bz.tis.sasabus.backend.shared.travelplanner.RFlags)o;
                  }
               }
            // ReqT
            if ((value = structure.property("ReqT")) != null)
               if (value.isNull())
                  ((ConReq)obj).ReqT = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((ConReq)obj).ReqT = (it.bz.tis.sasabus.backend.shared.travelplanner.ReqT)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("ReqT"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((ConReq)obj).ReqT = (it.bz.tis.sasabus.backend.shared.travelplanner.ReqT)o;
                  }
               }
            // Start
            if ((value = structure.property("Start")) != null)
               if (value.isNull())
                  ((ConReq)obj).Start = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((ConReq)obj).Start = (it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("ConReqStartDest"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((ConReq)obj).Start = (it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConScrReq", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ConResCtxt
            if ((value = structure.property("ConResCtxt")) != null)
               if (value.isNull())
                  ((ConScrReq)obj).ConResCtxt = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                        arrayList.add(value.string());
                  }                                                                   
                  ((ConScrReq)obj).ConResCtxt = (java.lang.String[])arrayList.toArray(new java.lang.String[0]);
               }
            // nrCons
            if ((value = structure.property("nrCons")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((ConScrReq)obj).nrCons = (int)value.integer();
               }
            // srcDir
            if ((value = structure.property("srcDir")) != null)
               if (value.isNull())
                  ((ConScrReq)obj).srcDir = null;
               else
               {
                  ((ConScrReq)obj).srcDir = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.LocValReq", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ReqLoc
            if ((value = structure.property("ReqLoc")) != null)
               if (value.isNull())
                  ((LocValReq)obj).ReqLoc = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((LocValReq)obj).ReqLoc = (it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("ReqLoc"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((LocValReq)obj).ReqLoc = (it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc)o;
                  }
               }
            // id
            if ((value = structure.property("id")) != null)
               if (value.isNull())
                  ((LocValReq)obj).id = null;
               else
               {
                  ((LocValReq)obj).id = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConRes", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.ConRes((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConRes", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ConResCtxt
            if ((value = structure.property("ConResCtxt")) != null)
               if (value.isNull())
                  ((ConRes)obj).ConResCtxt = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                        arrayList.add(value.string());
                  }                                                                   
                  ((ConRes)obj).ConResCtxt = (java.lang.String[])arrayList.toArray(new java.lang.String[0]);
               }
            // ConnectionList
            if ((value = structure.property("ConnectionList")) != null)
               if (value.isNull())
                  ((ConRes)obj).ConnectionList = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((ConRes)obj).ConnectionList = (it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("ConnectionList"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((ConRes)obj).ConnectionList = (it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList)o;
                  }
               }
            // dir
            if ((value = structure.property("dir")) != null)
               if (value.isNull())
                  ((ConRes)obj).dir = null;
               else
               {
                  ((ConRes)obj).dir = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.LocValRes", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Station
            if ((value = structure.property("Station")) != null)
               if (value.isNull())
                  ((LocValRes)obj).Station = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("Station"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((LocValRes)obj).Station = (it.bz.tis.sasabus.backend.shared.travelplanner.Station[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.Station[0]);
               }
            // id
            if ((value = structure.property("id")) != null)
               if (value.isNull())
                  ((LocValRes)obj).id = null;
               else
               {
                  ((LocValRes)obj).id = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConReqStartDest", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Prod
            if ((value = structure.property("Prod")) != null)
               if (value.isNull())
                  ((ConReqStartDest)obj).Prod = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("Prod"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((ConReqStartDest)obj).Prod = (it.bz.tis.sasabus.backend.shared.travelplanner.Prod[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.Prod[0]);
               }
            // Station
            if ((value = structure.property("Station")) != null)
               if (value.isNull())
                  ((ConReqStartDest)obj).Station = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((ConReqStartDest)obj).Station = (it.bz.tis.sasabus.backend.shared.travelplanner.Station)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Station"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((ConReqStartDest)obj).Station = (it.bz.tis.sasabus.backend.shared.travelplanner.Station)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.RFlags", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.RFlags((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.RFlags", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // b
            if ((value = structure.property("b")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((RFlags)obj).b = (int)value.integer();
               }
            // chExtension
            if ((value = structure.property("chExtension")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((RFlags)obj).chExtension = (int)value.integer();
               }
            // f
            if ((value = structure.property("f")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((RFlags)obj).f = (int)value.integer();
               }
            // sMode
            if ((value = structure.property("sMode")) != null)
               if (value.isNull())
                  ((RFlags)obj).sMode = null;
               else
               {
                  ((RFlags)obj).sMode = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ReqT", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.ReqT((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ReqT", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // a
            if ((value = structure.property("a")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((ReqT)obj).a = (int)value.integer();
               }
            // date
            if ((value = structure.property("date")) != null)
               if (value.isNull())
                  ((ReqT)obj).date = null;
               else
               {
                  ((ReqT)obj).date = value.string();
               }
            // time
            if ((value = structure.property("time")) != null)
               if (value.isNull())
                  ((ReqT)obj).time = null;
               else
               {
                  ((ReqT)obj).time = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ReqLoc", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // match
            if ((value = structure.property("match")) != null)
               if (value.isNull())
                  ((ReqLoc)obj).match = null;
               else
               {
                  ((ReqLoc)obj).match = value.string();
               }
            // type
            if ((value = structure.property("type")) != null)
               if (value.isNull())
                  ((ReqLoc)obj).type = null;
               else
               {
                  ((ReqLoc)obj).type = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConnectionList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Connection
            if ((value = structure.property("Connection")) != null)
               if (value.isNull())
                  ((ConnectionList)obj).Connection = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("Connection"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((ConnectionList)obj).Connection = (it.bz.tis.sasabus.backend.shared.travelplanner.Connection[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.Connection[0]);
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Station", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.Station((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Station", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // externalId
            if ((value = structure.property("externalId")) != null)
               if (value.isNull())
                  ((Station)obj).externalId = null;
               else
               {
                  ((Station)obj).externalId = value.string();
               }
            // externalStationNr
            if ((value = structure.property("externalStationNr")) != null)
               if (value.isNull())
                  ((Station)obj).externalStationNr = null;
               else
               {
                  ((Station)obj).externalStationNr = value.string();
               }
            // name
            if ((value = structure.property("name")) != null)
               if (value.isNull())
                  ((Station)obj).name = null;
               else
               {
                  ((Station)obj).name = value.string();
               }
            // type
            if ((value = structure.property("type")) != null)
               if (value.isNull())
                  ((Station)obj).type = null;
               else
               {
                  ((Station)obj).type = value.string();
               }
            // x
            if ((value = structure.property("x")) != null)
               if (value.isNull())
                  ((Station)obj).x = null;
               else
               {
                  ((Station)obj).x = value.string();
               }
            // y
            if ((value = structure.property("y")) != null)
               if (value.isNull())
                  ((Station)obj).y = null;
               else
               {
                  ((Station)obj).y = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Prod", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.Prod((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Prod", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // bike
            if ((value = structure.property("bike")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((Prod)obj).bike = (int)value.integer();
               }
            // couchette
            if ((value = structure.property("couchette")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((Prod)obj).couchette = (int)value.integer();
               }
            // direct
            if ((value = structure.property("direct")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((Prod)obj).direct = (int)value.integer();
               }
            // sleeper
            if ((value = structure.property("sleeper")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((Prod)obj).sleeper = (int)value.integer();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Connection", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.Connection((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Connection", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ConSectionList
            if ((value = structure.property("ConSectionList")) != null)
               if (value.isNull())
                  ((Connection)obj).ConSectionList = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Connection)obj).ConSectionList = (it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("ConSectionList"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Connection)obj).ConSectionList = (it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList)o;
                  }
               }
            // Overview
            if ((value = structure.property("Overview")) != null)
               if (value.isNull())
                  ((Connection)obj).Overview = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Connection)obj).Overview = (it.bz.tis.sasabus.backend.shared.travelplanner.Overview)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Overview"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Connection)obj).Overview = (it.bz.tis.sasabus.backend.shared.travelplanner.Overview)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConSectionList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // ConSection
            if ((value = structure.property("ConSection")) != null)
               if (value.isNull())
                  ((ConSectionList)obj).ConSection = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("ConSection"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((ConSectionList)obj).ConSection = (it.bz.tis.sasabus.backend.shared.travelplanner.ConSection[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.ConSection[0]);
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Overview", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.Overview((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Overview", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Arrival
            if ((value = structure.property("Arrival")) != null)
               if (value.isNull())
                  ((Overview)obj).Arrival = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Overview)obj).Arrival = (it.bz.tis.sasabus.backend.shared.travelplanner.Arrival)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Arrival"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Overview)obj).Arrival = (it.bz.tis.sasabus.backend.shared.travelplanner.Arrival)o;
                  }
               }
            // Departure
            if ((value = structure.property("Departure")) != null)
               if (value.isNull())
                  ((Overview)obj).Departure = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Overview)obj).Departure = (it.bz.tis.sasabus.backend.shared.travelplanner.Departure)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Departure"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Overview)obj).Departure = (it.bz.tis.sasabus.backend.shared.travelplanner.Departure)o;
                  }
               }
            // Duration
            if ((value = structure.property("Duration")) != null)
               if (value.isNull())
                  ((Overview)obj).Duration = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Overview)obj).Duration = (it.bz.tis.sasabus.backend.shared.travelplanner.Duration)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Duration"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Overview)obj).Duration = (it.bz.tis.sasabus.backend.shared.travelplanner.Duration)o;
                  }
               }
            // Transfers
            if ((value = structure.property("Transfers")) != null)
               if (value.isNull())
                  new RuntimeException("Impossibile value for primitive type");
               else
               {
                  ((Overview)obj).Transfers = (int)value.integer();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.ConSection", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.ConSection((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.ConSection", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Journey
            if ((value = structure.property("Journey")) != null)
               if (value.isNull())
                  ((ConSection)obj).Journey = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("Journey"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((ConSection)obj).Journey = (it.bz.tis.sasabus.backend.shared.travelplanner.Journey[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.Journey[0]);
               }
            // Walk
            if ((value = structure.property("Walk")) != null)
               if (value.isNull())
                  ((ConSection)obj).Walk = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("Walk"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((ConSection)obj).Walk = (it.bz.tis.sasabus.backend.shared.travelplanner.Walk[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.Walk[0]);
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Arrival", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.Arrival((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Arrival", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // BasicStop
            if ((value = structure.property("BasicStop")) != null)
               if (value.isNull())
                  ((Arrival)obj).BasicStop = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Arrival)obj).BasicStop = (it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("BasicStop"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Arrival)obj).BasicStop = (it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Departure", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.Departure((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Departure", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // BasicStop
            if ((value = structure.property("BasicStop")) != null)
               if (value.isNull())
                  ((Departure)obj).BasicStop = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Departure)obj).BasicStop = (it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("BasicStop"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Departure)obj).BasicStop = (it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Duration", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.Duration((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Duration", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Time
            if ((value = structure.property("Time")) != null)
               if (value.isNull())
                  ((Duration)obj).Time = null;
               else
               {
                  ((Duration)obj).Time = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Journey", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.Journey((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Journey", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // JourneyAttributeList
            if ((value = structure.property("JourneyAttributeList")) != null)
               if (value.isNull())
                  ((Journey)obj).JourneyAttributeList = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Journey)obj).JourneyAttributeList = (it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("JourneyAttributeList"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Journey)obj).JourneyAttributeList = (it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList)o;
                  }
               }
            // PassList
            if ((value = structure.property("PassList")) != null)
               if (value.isNull())
                  ((Journey)obj).PassList = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Journey)obj).PassList = (it.bz.tis.sasabus.backend.shared.travelplanner.PassList)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("PassList"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Journey)obj).PassList = (it.bz.tis.sasabus.backend.shared.travelplanner.PassList)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Walk", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.Walk((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Walk", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Duration
            if ((value = structure.property("Duration")) != null)
               if (value.isNull())
                  ((Walk)obj).Duration = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((Walk)obj).Duration = (it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("WalkDuration"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((Walk)obj).Duration = (it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Arr
            if ((value = structure.property("Arr")) != null)
               if (value.isNull())
                  ((BasicStop)obj).Arr = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((BasicStop)obj).Arr = (it.bz.tis.sasabus.backend.shared.travelplanner.DepArr)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("DepArr"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((BasicStop)obj).Arr = (it.bz.tis.sasabus.backend.shared.travelplanner.DepArr)o;
                  }
               }
            // Dep
            if ((value = structure.property("Dep")) != null)
               if (value.isNull())
                  ((BasicStop)obj).Dep = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((BasicStop)obj).Dep = (it.bz.tis.sasabus.backend.shared.travelplanner.DepArr)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("DepArr"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((BasicStop)obj).Dep = (it.bz.tis.sasabus.backend.shared.travelplanner.DepArr)o;
                  }
               }
            // Station
            if ((value = structure.property("Station")) != null)
               if (value.isNull())
                  ((BasicStop)obj).Station = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((BasicStop)obj).Station = (it.bz.tis.sasabus.backend.shared.travelplanner.Station)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Station"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((BasicStop)obj).Station = (it.bz.tis.sasabus.backend.shared.travelplanner.Station)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttributeList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // JourneyAttribute
            if ((value = structure.property("JourneyAttribute")) != null)
               if (value.isNull())
                  ((JourneyAttributeList)obj).JourneyAttribute = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("JourneyAttribute"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((JourneyAttributeList)obj).JourneyAttribute = (it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute[0]);
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.PassList", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.PassList((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.PassList", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // BasicStop
            if ((value = structure.property("BasicStop")) != null)
               if (value.isNull())
                  ((PassList)obj).BasicStop = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("BasicStop"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((PassList)obj).BasicStop = (it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.BasicStop[0]);
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.WalkDuration", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Time
            if ((value = structure.property("Time")) != null)
               if (value.isNull())
                  ((WalkDuration)obj).Time = null;
               else
               {
                  ((WalkDuration)obj).Time = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.DepArr", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.DepArr((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.DepArr", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Time
            if ((value = structure.property("Time")) != null)
               if (value.isNull())
                  ((DepArr)obj).Time = null;
               else
               {
                  ((DepArr)obj).Time = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.JourneyAttribute", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Attribute
            if ((value = structure.property("Attribute")) != null)
               if (value.isNull())
                  ((JourneyAttribute)obj).Attribute = null;
               else
               {
                  String refid = value.structure().getRefId();    
                  if (refid != null)                              
                     ((JourneyAttribute)obj).Attribute = (it.bz.tis.sasabus.backend.shared.travelplanner.Attribute)identities.get(refid);
                  else {
                     Object o = newInstance(value.structure().getRuntimeClassName("Attribute"));              
                     internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                     ((JourneyAttribute)obj).Attribute = (it.bz.tis.sasabus.backend.shared.travelplanner.Attribute)o;
                  }
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.Attribute", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.Attribute((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.Attribute", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // AttributeVariant
            if ((value = structure.property("AttributeVariant")) != null)
               if (value.isNull())
                  ((Attribute)obj).AttributeVariant = null;
               else
               {
                  bz.davide.dmxmljson.unmarshalling.Array arr = value.array();        
                  java.util.ArrayList arrayList = new java.util.ArrayList();       
                  while ((value = arr.nextItem()) != null) {                       
                     if (value.isNull())                                           
                        arrayList.add(null);                                       
                     else                                                          
                     {                                                                   
                        String refid = value.structure().getRefId();    
                        if (refid != null)                              
                           arrayList.add(identities.get(refid));                                                
                        else {
                           Object o = newInstance(value.structure().getRuntimeClassName("AttributeVariant"));              
                           internalUnmarschall(value.structure(), o.getClass().getName(), o, identities); 
                           arrayList.add(o);                                                
                        }
                     }                                                                   
                  }                                                                   
                  ((Attribute)obj).AttributeVariant = (it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant[])arrayList.toArray(new it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant[0]);
               }
            // type
            if ((value = structure.property("type")) != null)
               if (value.isNull())
                  ((Attribute)obj).type = null;
               else
               {
                  ((Attribute)obj).type = value.string();
               }
         }
      });
      this.putInstanceFactory("it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant", new bz.davide.dmxmljson.unmarshalling.InstanceFactory() {
         @Override public Object newInstance() throws Exception {
            return new it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant((Void)null);
         }
      });

      this.putClassUnmarshaller("it.bz.tis.sasabus.backend.shared.travelplanner.AttributeVariant", new bz.davide.dmxmljson.unmarshalling.ClassUnmarshaller() {
         @Override public void unmarshall(bz.davide.dmxmljson.unmarshalling.Structure structure, Object obj, java.util.HashMap<String, Object> identities) throws Exception {
            String id = structure.getId();
            if (id != null)
               identities.put(id, obj);
            bz.davide.dmxmljson.unmarshalling.Value value;
            // Text
            if ((value = structure.property("Text")) != null)
               if (value.isNull())
                  ((AttributeVariant)obj).Text = null;
               else
               {
                  ((AttributeVariant)obj).Text = value.string();
               }
            // type
            if ((value = structure.property("type")) != null)
               if (value.isNull())
                  ((AttributeVariant)obj).type = null;
               else
               {
                  ((AttributeVariant)obj).type = value.string();
               }
         }
      });

   }
}
